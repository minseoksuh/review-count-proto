{"version":3,"sources":["queries.js","Query.js","Wrapper.js","App.js","client.js","reportWebVitals.js","index.js"],"names":["GET_PR_REVIEWS","gql","Query","repoName","onRequestComplete","isDataLoaded","queryString","useMemo","getFirstDateOfMonth","res","useQuery","variables","useEffect","data","userToReviewCountMap","search","edges","reduce","prev","curr","authorSet","Set","node","comments","nodes","forEach","comment","add","author","login","reviews","review","username","undefined","style","marginTop","d","Date","month","getMonth","year","getFullYear","length","padStart","join","useStyles","makeStyles","table","width","margin","repoList","memberList","Wrapper","classes","useState","repoReviewCounts","setRepoReviewCounts","setReviewCountsData","useCallback","reviewCountData","console","log","isDataReady","every","position","top","left","Table","className","aria-label","TableHead","fontWeight","TableRow","TableCell","map","align","TableBody","member","component","scope","Object","keys","marginLeft","marginBottom","App","client","cleanPAK","process","replace","ApolloClient","uri","headers","Authorization","service","name","url","authorization","skipSSLValidation","createClient","ApolloProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14038bb9.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\n\nexport const GET_PR_REVIEWS = gql`\n  query($queryString: String!) {\n    search(query: $queryString, type: ISSUE, first: 100) {\n      edges {\n        node {\n          ... on PullRequest {\n            title\n            reviews(first: 100) {\n              nodes {\n                author {\n                  login\n                }\n              }\n            }\n            comments(first: 100) {\n              nodes {\n                author {\n                  login\n                }\n              }\n            }\n            createdAt\n          }\n        }\n      }\n    }\n  }\n`;\n","import { useQuery } from \"@apollo/react-hooks\";\nimport { GET_PR_REVIEWS } from \"./queries\";\n\nimport { useEffect, useMemo } from \"react\";\n\nconst Query = ({ repoName, onRequestComplete, isDataLoaded }) => {\n  const queryString = useMemo(\n    () => `repo:meshkorea/${repoName} is:pr created:>=${getFirstDateOfMonth()}`,\n    [repoName]\n  );\n\n  const res = useQuery(GET_PR_REVIEWS, {\n    variables: {\n      queryString: queryString,\n    },\n  });\n  useEffect(() => {\n    if (res && res.data) {\n      const userToReviewCountMap = res.data.search.edges.reduce(\n        (prev, curr) => {\n          const authorSet = new Set();\n\n          curr.node.comments.nodes.forEach((comment) => {\n            authorSet.add(comment.author.login);\n          });\n\n          curr.node.reviews.nodes.forEach((review) => {\n            authorSet.add(review.author.login);\n          });\n\n          authorSet.forEach((username) => {\n            prev[username] =\n              prev[username] === undefined ? 1 : prev[username] + 1;\n          });\n\n          return prev;\n        },\n        {}\n      );\n\n      onRequestComplete(repoName, userToReviewCountMap);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [res]);\n\n  return (\n    <li style={{ marginTop: \"20px\" }}>\n      {repoName}: {isDataLoaded ? \"데이터 로드 완료\" : \"데이터 로드 중\"}\n    </li>\n  );\n};\n\nexport default Query;\n\nexport function getFirstDateOfMonth() {\n  var d = new Date(),\n    month = \"\" + (d.getMonth() + 1),\n    year = d.getFullYear();\n\n  if (month.length < 2) month = month.padStart(2, \"0\");\n\n  return [year, month, \"01\"].join(\"-\");\n}\n","import { useState, useCallback, useMemo } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport Query, { getFirstDateOfMonth } from \"./Query\";\n\nconst useStyles = makeStyles({\n  table: {\n    width: 1020,\n    margin: \"40px auto 40px\",\n  },\n});\nconst repoList = [\n  \"mesh-one-web\",\n  \"mesh-one-api\",\n  \"mesh-ui\",\n  \"mesh-control-platform-api\",\n  \"meshkorea-landing-web\",\n  \"vroong-tms-manager-web\",\n  \"vroong-design-system-web\",\n  \"vroong-urban-web\",\n  \"vroong-store-web\",\n  \"vroong-ceo-web\",\n  \"vroong-orga-web\",\n  \"vroong-bi-web\",\n  \"vroong-rider-web\",\n  \"vroong-direct-web\",\n  \"vroong-mds-chrome-extension\",\n  \"cake-form\",\n  \"automata\",\n];\n\n// TODO: get member list from api\nconst memberList = [\n  \"mindfull\",\n  \"ClareKang\",\n  \"yeomhyeseon\",\n  \"magichim\",\n  \"haeguri\",\n  \"kizmo04\",\n  \"Pewww\",\n  \"juunone\",\n  \"k44ng\",\n  \"minseoksuh\",\n];\n\nexport default function Wrapper() {\n  const classes = useStyles();\n\n  const [repoReviewCounts, setRepoReviewCounts] = useState({});\n\n  const setReviewCountsData = useCallback(\n    (repoName, reviewCountData) => {\n      setRepoReviewCounts({ ...repoReviewCounts, [repoName]: reviewCountData });\n    },\n    [repoReviewCounts]\n  );\n\n  console.log(\"state\", repoReviewCounts);\n\n  const isDataReady = useMemo(() => {\n    return repoList.every((repoName) => !!repoReviewCounts[repoName]);\n  }, [repoReviewCounts]);\n\n  console.log({ isDataReady });\n\n  return (\n    <div style={{ margin: \"auto\" }}>\n      <span style={{ position: \"absolute\", top: \"12px\", left: \"12px\" }}>\n        {`${new Date().getFullYear()}년 ${\n          new Date().getMonth() + 1\n        }월 리뷰 현황판`}\n      </span>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead style={{ fontWeight: \"700\" }}>\n          <TableRow>\n            <TableCell>Dev / Repo</TableCell>\n            {repoList.map((repoName) => (\n              <TableCell align=\"right\">{repoName}</TableCell>\n            ))}\n            <TableCell>Total</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {isDataReady\n            ? memberList.map((member) => (\n                <TableRow key={member}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {member}\n                  </TableCell>\n                  {repoList.map((repoName) => (\n                    <TableCell align=\"right\">\n                      {repoReviewCounts[repoName][member] ?? 0}\n                    </TableCell>\n                  ))}\n                  <TableCell>\n                    {Object.keys(repoReviewCounts).reduce((prev, curr) => {\n                      console.log(prev, curr);\n                      return prev + (repoReviewCounts[curr][member] ?? 0);\n                    }, 0)}\n                  </TableCell>\n                </TableRow>\n              ))\n            : \"데이터 로드 중\"}\n        </TableBody>\n      </Table>\n      <hr style={{ margin: \"0 20px\" }} />\n      <br />\n\n      <div style={{ marginLeft: \"30px\", marginBottom: \"12px\" }}>\n        *{getFirstDateOfMonth()} 이후로 생성된 PR에 대하여 코멘트나 리뷰를\n        해주셨다면 count 1 이 올라갑니다.\n      </div>\n      <div style={{ marginLeft: \"30px\" }}>\n        *한 PR에 여러번 리뷰를 하더라도 1로 count 됩니다.\n      </div>\n      <ul style={{ marginLeft: \"30px\" }}>\n        {repoList.map((repoName) => (\n          <Query\n            repoName={repoName}\n            onRequestComplete={setReviewCountsData}\n            isDataLoaded={!!repoReviewCounts[repoName]}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import { ApolloProvider } from \"@apollo/react-hooks\";\nimport Wrapper from \"./Wrapper\";\nimport { createClient } from \"./client\";\n\nfunction App() {\n  const client = createClient();\n\n  return (\n    <ApolloProvider client={client}>\n      <Wrapper />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import ApolloClient from \"apollo-boost\";\n\nexport const createClient = () => {\n  const PAK = process.env.REACT_APP_GITHUB_KEY;\n\n  const cleanPAK = PAK.replace(\"min\", \"\");\n\n  return new ApolloClient({\n    uri: \"https://api.github.com/graphql\",\n    headers: {\n      Authorization: `bearer ${cleanPAK}`,\n    },\n    service: {\n      name: \"github\",\n      url: \"https://api.github.com/graphql\",\n      // optional headers\n      headers: {\n        authorization: `bearer ${cleanPAK}`,\n      },\n      // optional disable SSL validation check\n      skipSSLValidation: true,\n    },\n  });\n};\n\n// const client = new ApolloClient({\n//   uri: \"https://api.github.com/graphql\",\n//   headers: {\n//     Authorization: `bearer ${process.env.REACT_APP_GITHUB_KEY}`,\n//   },\n//   service: {\n//     name: \"github\",\n//     url: \"https://api.github.com/graphql\",\n//     // optional headers\n//     headers: {\n//       authorization: `bearer ${process.env.REACT_APP_GITHUB_KEY}`,\n//     },\n//     // optional disable SSL validation check\n//     skipSSLValidation: true,\n//   },\n// });\n\n// export default client;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}